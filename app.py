
import streamlit as st
import pandas as pd
import numpy as np

# ---------- Physico-chemical models ----------

def co2_density_peng_robinson(P, T):
    return 0.001 * (P / (T + 273.15)) * 44  # g/cm3

def solubility(P, T, compound_coeff=1.0):
    rho = co2_density_peng_robinson(P, T)
    return compound_coeff * rho * 1000  # mg/g

def sovova_extraction_model(t, P, T, dp, flow, Y_max=22, compound_coeff=1.0, shape_factor=1.0):
    D_eff = 1e-6  # m2/s
    A_surf = 1 / dp  # mm^-1
    k_eff = D_eff * A_surf * (flow / 60) * shape_factor
    Y = Y_max * (1 - np.exp(-k_eff * t))
    return min(Y, Y_max)

# ---------- Streamlit Interface ----------

st.set_page_config(page_title="SIMEXTRACT", layout="wide")
st.title("üß™ SIMEXTRACT - CO‚ÇÇ Extraction Simulator")
st.markdown("Visualisez votre rendement estim√© en extraction supercritique CO‚ÇÇ en fonction des param√®tres machine, de la g√©om√©trie de lit et du compos√© extrait.")

# Menu d√©roulant : compos√© extrait
compound_options = {
    "Acide ol√©ique (lipide classique)": 1.0,
    "Limon√®ne (terp√®ne volatil)": 1.2,
    "Tocoph√©rol (Vitamine E)": 0.6,
    "Caf√©ine (soluble partiellement)": 0.5,
    "Polyph√©nols (tr√®s peu solubles)": 0.35
}
compound_choice = st.selectbox("üî¨ Compos√© √† extraire", list(compound_options.keys()))
compound_coeff = compound_options[compound_choice]

# Menu d√©roulant : extracteur
extractor_options = {
    "SFE Lab Mini ‚Äì 0.5 L (remplissage 60%)": 0.65,
    "Skrlj 1L GMP ‚Äì standard (70%)": 0.85,
    "SFE Process 2L ‚Äì optimis√© (80%)": 1.0,
    "Pilote 5L ‚Äì surrempli (90%)": 1.1,
    "Extracteur artisanal ‚Äì irr√©gulier (100%)": 0.5
}
extractor_choice = st.selectbox("üèóÔ∏è Configuration d'extracteur", list(extractor_options.keys()))
shape_factor = extractor_options[extractor_choice]

# Param√®tres op√©ratoires (menus simplifi√©s)
P = st.selectbox("üß≠ Pression (bar)", [100, 150, 200, 250, 300])
T = st.selectbox("üå°Ô∏è Temp√©rature (¬∞C)", [40, 50, 60, 70, 80])
dp = st.selectbox("üîò Taille particules (mm)", [0.1, 0.3, 0.5, 1.0])
flow = st.selectbox("üí® D√©bit CO‚ÇÇ (kg/h)", [2, 5, 10, 20, 50])
time = st.selectbox("‚è±Ô∏è Temps d'extraction (min)", [15, 30, 60, 120, 180])

# Prediction
if st.button("‚ñ∂Ô∏è Lancer la simulation"):
    Ymax = solubility(P, T, compound_coeff) / 100  # % max bas√© sur solubilit√©
    rendement = sovova_extraction_model(time, P, T, dp, flow, Y_max=Ymax, compound_coeff=compound_coeff, shape_factor=shape_factor)

    df = pd.DataFrame([{
        "Compos√©": compound_choice,
        "Extracteur": extractor_choice,
        "Pression (bar)": P,
        "Temp√©rature (¬∞C)": T,
        "Granulom√©trie (mm)": dp,
        "D√©bit CO‚ÇÇ (kg/h)": flow,
        "Temps (min)": time,
        "Rendement estim√© (%)": round(rendement, 2)
    }])

    st.subheader("üìä R√©sultat de la simulation")
    st.dataframe(df)
    st.success(f"‚úÖ Rendement estim√© : {round(rendement, 2)} %")

    csv = df.to_csv(index=False).encode("utf-8")
    st.download_button("üì• T√©l√©charger les r√©sultats", data=csv, file_name="resultats_simextract.csv", mime="text/csv")
else:
    st.info("S√©lectionnez les param√®tres ci-dessus et cliquez sur ‚ñ∂Ô∏è pour estimer le rendement.")
